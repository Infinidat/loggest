strategy:
  matrix:
    mac-stable-lib:
      imageName: 'macos-10.13'
      rustup_toolchain: stable
      working_directory: .
    linux-stable-lib:
      imageName: 'ubuntu-16.04'
      rustup_toolchain: stable
      working_directory: .

    mac-stable-ioym:
      imageName: 'macos-10.13'
      rustup_toolchain: stable
      working_directory: ioym
    linux-stable-ioym:
      imageName: 'ubuntu-16.04'
      rustup_toolchain: stable
      working_directory: ioym

    mac-stable-loggestd:
      imageName: 'macos-10.13'
      rustup_toolchain: stable
      working_directory: loggestd
    linux-stable-loggestd:
      imageName: 'ubuntu-16.04'
      rustup_toolchain: stable
      working_directory: loggestd
    win-stable-loggestd:
      imageName: 'vs2017-win2016'
      rustup_toolchain: stable
      working_directory: loggestd


pool:
  vmImage: $(imageName)

steps:
  - script: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
    displayName: Install rust
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
  - script: |
      curl -sSf -o rustup-init.exe https://win.rustup.rs
      rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
      echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
    displayName: Windows install rust
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
  - script: rustup component add clippy rustfmt
    displayName: install clipppy and rustfmt

  - script: cargo fmt --all -- --check
    displayName: rustfmt
    workingDirectory: $(working_directory)
  - script: cargo build --all
    displayName: Cargo build
    workingDirectory: $(working_directory)
  - script: cargo clippy --all-targets -- -D warnings
    displayName: clippy
    workingDirectory: $(working_directory)
  - script: cargo test --all
    displayName: Cargo test
    workingDirectory: $(working_directory)
